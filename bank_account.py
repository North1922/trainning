# üîπ –ó–∞–¥–∞–Ω–∏–µ 1. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞
#
# –°–¥–µ–ª–∞–π —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤.
#
#TODO –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å BankAccount —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ owner, balance, –º–µ—Ç–æ–¥–∞–º–∏ deposit(amount), withdraw(amount).
#
#TODO –ö–ª–∞—Å—Å SavingsAccount (—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏ –º–µ—Ç–æ–¥ add_interest().
#
#TODO –ö–ª–∞—Å—Å CheckingAccount (—Ä–∞—Å—á—ë—Ç–Ω—ã–π), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —Å–Ω—è—Ç–∏–µ –∑–∞ –¥–µ–Ω—å.
#
#TODO –ü–æ–¥—É–º–∞–π, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∞ –≥–¥–µ ‚Äî –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
from datetime import datetime, date, timezone, timedelta
from decimal import Decimal, ROUND_HALF_UP



class AccountError(Exception):
    pass

class InvalidAmount(AccountError):
    """–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (<= 0 –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞)."""

class LimitExceeded(AccountError):
    """–ü—Ä–µ–≤—ã—à–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç —Å–Ω—è—Ç–∏–π."""

class InsufficientFunds(AccountError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤/–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —É—Ö–æ–¥ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞."""


class BankAccount:
    def __init__(self, owner: str, balance: Decimal = Decimal('0.00'), currency='RUB'):
        self.owner = owner # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.balance = type(self).quantize_money(balance) # –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞
        self.currency = currency # –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞

    def deposit(self, amount: Decimal): # —Ñ—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á—ë—Ç, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å Decimal
        if not isinstance(amount, Decimal):
            raise AccountError('–í –∫–∞—á–µ—Å—Ç–≤–µ —Å—É–º–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–∏–ø Decimal')
        if amount <= 0:
            raise InvalidAmount('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0')
        amount = type(self).quantize_money(amount) # –∫–≤–∞–Ω—Ç–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—É –Ω–∞ –≤—Ö–æ–¥–µ
        self.balance = type(self).quantize_money(self.balance + amount) # —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–¥ –¥—É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ –∫–≤–∞–Ω—Ç–∏–∑–∏—Ä—É–µ–º


    def withdraw(self, amount: Decimal, *, now: datetime | None = None):
        if not isinstance(amount, Decimal):
            raise AccountError('–í –∫–∞—á–µ—Å—Ç–≤–µ —Å—É–º–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–∏–ø Decimal')
        if amount <= 0:
            raise InvalidAmount('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0')
        self._validate_withdraw(amount, now)
        amount_quantize = type(self).quantize_money(amount) #amount –ø—Ä–∏–≤–µ–ª–∏ –∫ –Ω—É–∂–Ω–æ–º—É –¥–µ–Ω–µ–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏ –æ–∫—Ä—É–≥–ª–∏–ª–∏ ROUND_HALF_UP
        self.balance = type(self).quantize_money(self.balance - amount_quantize) #–∏–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∑–∞ –≤—ã—á–µ—Ç–æ–º —Å—É–º–º—ã –∫–æ—Ç–æ—Ä—É—é —Å–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞



    def get_balance(self):
        return self.balance

    def _validate_withdraw(self, amount: Decimal, now: datetime | None):
        pass

    @staticmethod
    def quantize_money(x: Decimal) -> Decimal:
        return x.quantize(Decimal('0.01'),
                          ROUND_HALF_UP)


class CheckingAccount(BankAccount):
    def __init__(self, owner, balance: Decimal = Decimal('0.00'), currency='RUB',
                 daily_withdraw_limit: Decimal | None = None):
        super().__init__(owner, balance, currency)
        if daily_withdraw_limit is None:
            self.daily_withdraw_limit = None
        else:
            self.daily_withdraw_limit: Decimal = type(self).quantize_money(daily_withdraw_limit)
        self.withdrawn_today: Decimal = Decimal('0.00')
        self.tz_info = timezone(timedelta(hours=3), name="UTC+3")
        self.window_date: date = datetime.now(self.tz_info).date()
        self.allow_overdraft = True

    def _reset_window_if_need(self, now: date):
        if now != self.window_date:
            self.withdrawn_today = Decimal("0.00")
            self.window_date = now

    def _validate_withdraw(self, amount, now: datetime | None):
        amount_quantize = type(self).quantize_money(amount)

        if now is None:
            now = datetime.now(self.tz_info)
        elif now.tzinfo is None:
            now = now.replace(tzinfo=self.tz_info)
        else:
            now = now.astimezone(self.tz_info)

        local_date = now.date()

        self._reset_window_if_need(local_date)

        if self.daily_withdraw_limit is not None:
            withdrawn_candidate = self.withdrawn_today + amount_quantize
            if withdrawn_candidate > self.daily_withdraw_limit:
                raise LimitExceeded('–ü—Ä–µ–≤—ã—à–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç —Å–Ω—è—Ç–∏–π.')
        self.withdrawn_today = type(self).quantize_money(self.withdrawn_today + amount_quantize)


class SavingsAccount(BankAccount):
    def __init__(self, owner, balance: Decimal = Decimal('0.00'), currency='RUB',
                 annual_rate: float = 0.00):
        super().__init__(owner, balance, currency)
        self.annual_rate = float(annual_rate)
        self.last_accrual_date: date = datetime.now().date()  # –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–¥–µ—Ç date –∞ –Ω–µ datetime

    @staticmethod
    def _add_months(start: date, months: int):
        if months < 0:
            raise ValueError('–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 0')
        Y = start.year
        M = start.month
        D = start.day
        total = (M - 1) + months
        Y2 = Y + total // 12
        M2 = (total % 12) + 1

        if M2 in (1,3,5,7,8,10,12):
            last_day = 31
        elif M2 in (4,6,9,11):
            last_day = 30
        elif M2 == 2:
            if Y2 % 400 == 0 or (Y2 % 4 == 0 and Y2 % 100 != 0):
                last_day = 29
            else:
                last_day = 28

        D2 = min(D, last_day)
        return date(Y2, M2, D2)

    def accrue_monthly_interest(self, now: date):
        as_of = now
        start = self.last_accrual_date
        month = (as_of.year - start.year) * 12 + (as_of.month - start.month)
        if as_of.day < start.day:
            month -= 1
        if month == 0:
            return Decimal('0.00')
        if month < 0:
            month = 0
        r_month_float = (1 + self.annual_rate) ** (1/12) - 1 # —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞–≤–∫—É
        dec_r_month = Decimal(str(r_month_float))
        balance_work = self.balance
        total_interest = Decimal('0.00')
        for i in range(1,month+1):
            interest_raw = balance_work * dec_r_month
            interest = type(self).quantize_money(interest_raw)
            balance_work = type(self).quantize_money(balance_work + interest)
            total_interest = type(self).quantize_money(total_interest + interest)
        self.balance = balance_work
        self.last_accrual_date = type(self)._add_months(self.last_accrual_date, month)
        return total_interest