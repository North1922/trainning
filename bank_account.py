# üîπ –ó–∞–¥–∞–Ω–∏–µ 1. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞
#
# –°–¥–µ–ª–∞–π —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤.
#
#TODO –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å BankAccount —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ owner, balance, –º–µ—Ç–æ–¥–∞–º–∏ deposit(amount), withdraw(amount).
#
#TODO –ö–ª–∞—Å—Å SavingsAccount (—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏ –º–µ—Ç–æ–¥ add_interest().
#
#TODO –ö–ª–∞—Å—Å CheckingAccount (—Ä–∞—Å—á—ë—Ç–Ω—ã–π), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —Å–Ω—è—Ç–∏–µ –∑–∞ –¥–µ–Ω—å.
#
#TODO –ü–æ–¥—É–º–∞–π, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∞ –≥–¥–µ ‚Äî –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
from datetime import datetime, date
from decimal import Decimal, ROUND_HALF_UP

class AccountError(Exception):
    pass

class InvalidAmount(AccountError):
    """–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (<= 0 –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞)."""

class LimitExceeded(AccountError):
    """–ü—Ä–µ–≤—ã—à–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç —Å–Ω—è—Ç–∏–π."""

class InsufficientFunds(AccountError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤/–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —É—Ö–æ–¥ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞."""


class BankAccount:
    def __init__(self, owner: str, balance: Decimal = Decimal('0.00'), currency='RUB'):
        self.owner = owner
        self.balance = balance
        self.currency = currency

    def deposit(self, amount: Decimal):
        if not isinstance(amount, Decimal):
            raise AccountError('–í –∫–∞—á–µ—Å—Ç–≤–µ —Å—É–º–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–∏–ø Decimal')
        if amount <= 0:
            raise InvalidAmount('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0')
        amount = type(self).quantize_money(amount)
        self.balance = type(self).quantize_money(self.balance + amount)


    def withdraw(self, amount: Decimal, *, now: datetime | None = None):
        pass

    def get_balance(self):
        return self.balance

    def _validate_withdraw(self, amount, now):
        # –í –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ validate_withdraw(now)
        # –µ—Å–ª–∏ window_date is None ‚Äî –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é window_date = –ª–æ–∫–∞–ª—å–Ω–∞—è_–¥–∞—Ç–∞(now) –∏ withdrawn_today = 0.00(–±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è);
        # –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—é
        pass

    @staticmethod
    def quantize_money(x: Decimal) -> Decimal:
        return x.quantize(Decimal('1.00'), ROUND_HALF_UP)


class CheckingAccount(BankAccount):
    def __init__(self, owner, balance: Decimal = Decimal('0.00'), currency='RUB',
                 daily_withdraw_limit: Decimal | None = None):
        super().__init__(owner, balance, currency)
        self.daily_withdraw_limit = daily_withdraw_limit
        self.withdrawn_today: Decimal = Decimal('0.00')
        self.window_date: date | None = None
        self.tz_info = 'UTC+3'
        self.allow_overdraft = True

    def _reset_window_if_need(self, now):
        pass

    def _validate_withdraw(self, amount, now):
        pass


class SavingsAccount(BankAccount):
    def __init__(self, owner, balance: Decimal = Decimal('0.00'), currency='RUB',
                 annual_rate: Decimal = Decimal(0.00)):
        super().__init__(owner, balance, currency)
        self.annual_rate = annual_rate
        self.last_accrual_date: date | None = None #–¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–¥–µ—Ç date –∞ –Ω–µ datetime

    def accure_monthly_interest(self, now: date):
        pass